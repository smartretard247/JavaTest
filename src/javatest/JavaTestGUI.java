/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package javatest;

import FinalProject.GraphUMUC;
import FinalProject.Vector;
import Homework2.LinkedListUMUC;
import Interfaces.IBinaryTree;
import Interfaces.ILinkedList;
import Interfaces.*; //add my classes and interfaces
import Project1.*;
import Project2.NodeTreeBin;
import Project2.TreeBinUMUC;
import Project3.MySort;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javatest.JavaTest.makeRandom;

/**
 *
 * @author Jeezy
 */
public class JavaTestGUI extends javax.swing.JFrame {
    JavaTest[] x = makeRandom (10);
    
    StackUMUC theStack = new StackUMUC(10);
    QueueUMUC theQueue = new QueueUMUC();
    LinkedListUMUC theList = new LinkedListUMUC();
    TreeBinUMUC theTree;
    JavaTestGraphUMUC theGraph;
    
    static String inputFileName = "saved.txt",
            outputFileName = "saved.txt",
            binaryTreeFileName = "BinaryTreeData.txt",
            graphFlieName = "GraphData.txt";
    
    /**
     * Creates new form JavaTestGUI
     */
    public JavaTestGUI() {
        initComponents();
        
        outputTextArea.setText("\n\t---- UNSORTED -----\n");
        JavaTest y1 = new JavaTest ("987654321 1503.20 2 0.10 2000.90"); //test constructor
        x[9] = y1; //put in last slot
        
        for (JavaTest m: x) { outputTextArea.append(m + "\n"); }
        
        //preload the stack with 5 random JavaTest objects
        JavaTest[] y2 = makeRandom(5);
        for(JavaTest m : y2) { theStack.push(m); }
        
        //preload the queue with 5 random JavaTest objects
        JavaTest[] y3 = makeRandom(5);
        for(JavaTest m : y3) { theQueue.put(m); }
        
        //empty the combo boxes
        linkedListRemoveN.removeAllItems();
        linkedListPeekN.removeAllItems();
        
        //preload the list with 5 random JavaTest objects
        JavaTest[] y4 = makeRandom(5);
        for(JavaTest m : y4) { theList.insertTail(m); }
        
        //add items to the combo boxes
        for(int i = 0; i < theList.getN(); i++) {
            linkedListRemoveN.addItem(i);
            linkedListPeekN.addItem(i);
        }
        
        //initialize the binary tree with 10 randoms
        JavaTest[] y5 = makeRandom(10);
        theTree = new TreeBinUMUC();
        theTree.setName("Binary Tree");
        binaryTreeElementN.removeAllItems(); //clear the combo box associated with finding these elements
        for(JavaTest m : y5) {
            NodeTreeBin inserted = (NodeTreeBin)theTree.insertNode(theTree.getRoot(), new NodeTreeBin(), m); //insert all the nodes
            binaryTreeElementN.addItem(inserted.toString());
        }
        
        //initialize the graph
        JavaTest[] y6 = makeRandom(10);
        theGraph = new JavaTestGraphUMUC();
        for(JavaTest m : y6) {
            theGraph.pushVector(new Vector(m));
        }
        
        //empty the combo boxes
        graphCmb1.removeAllItems();
        graphCmb2.removeAllItems();
        
        //add items to the combo boxes
        for(int i = 0; i < y6.length; i++) {
            Vector v = (Vector)theGraph.getGraph().getArray()[i];
            graphCmb1.addItem(v);
            graphCmb2.addItem(v);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputFileChooserFrame = new javax.swing.JFrame();
        inputFileChooser = new javax.swing.JFileChooser();
        outputFileChooserFrame = new javax.swing.JFrame();
        outputFileChooser = new javax.swing.JFileChooser();
        sortbyButtonGroup = new javax.swing.ButtonGroup();
        stackButtonGroup = new javax.swing.ButtonGroup();
        queueButttonGroup = new javax.swing.ButtonGroup();
        linkedlistButtonGroup = new javax.swing.ButtonGroup();
        binaryTreeButtonGroup = new javax.swing.ButtonGroup();
        binaryTreeFileChooserFrame = new javax.swing.JFrame();
        binaryTreeFileChooser = new javax.swing.JFileChooser();
        sortingButtonGroup = new javax.swing.ButtonGroup();
        outputScrollPane = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        okButton = new javax.swing.JButton();
        inputButton = new javax.swing.JButton();
        outputButton = new javax.swing.JButton();
        readButton = new javax.swing.JButton();
        writeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        sortbySSN = new javax.swing.JRadioButton();
        sortbyTaxReturn = new javax.swing.JRadioButton();
        sortbyExemptions = new javax.swing.JRadioButton();
        sortbyTaxRate = new javax.swing.JRadioButton();
        sortbyWithholding = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        stackPeek = new javax.swing.JRadioButton();
        stackPop = new javax.swing.JRadioButton();
        stackPush = new javax.swing.JRadioButton();
        queuePeek = new javax.swing.JRadioButton();
        queueGet = new javax.swing.JRadioButton();
        queuePut = new javax.swing.JRadioButton();
        stackDisplay = new javax.swing.JRadioButton();
        queueDisplay = new javax.swing.JRadioButton();
        stackEmpty = new javax.swing.JRadioButton();
        queueEmpty = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        linkedListInsertHead = new javax.swing.JRadioButton();
        linkedListInsertTail = new javax.swing.JRadioButton();
        linkedListRemoveHead = new javax.swing.JRadioButton();
        linkedListDisplay = new javax.swing.JRadioButton();
        linkedListEmpty = new javax.swing.JRadioButton();
        linkedListRemoveTail = new javax.swing.JRadioButton();
        linkedListPeekHead = new javax.swing.JRadioButton();
        linkedListPeekTail = new javax.swing.JRadioButton();
        linkedListRemoveElementAt = new javax.swing.JRadioButton();
        linkedListPeekElementAt = new javax.swing.JRadioButton();
        linkedListRemoveN = new javax.swing.JComboBox();
        linkedListPeekN = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        binaryTreeDisplay = new javax.swing.JRadioButton();
        binaryTreeInsertNode = new javax.swing.JRadioButton();
        binaryTreeEmpty = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        binaryTreeSelectFile = new javax.swing.JButton();
        binaryTreeReadFromFile = new javax.swing.JButton();
        binaryTreeElementN = new javax.swing.JComboBox();
        binaryTreeToInOrder = new javax.swing.JRadioButton();
        binaryTreeToPreOrder = new javax.swing.JRadioButton();
        binaryTreeToPostOrder = new javax.swing.JRadioButton();
        binaryTreeFindElementButton = new javax.swing.JButton();
        binaryTreeCountNodes = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        insertionSortButton = new javax.swing.JRadioButton();
        mergeSortButton = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        graphCmb1 = new javax.swing.JComboBox();
        graphCmb2 = new javax.swing.JComboBox();
        graphAddEdge = new javax.swing.JButton();
        graphBFS = new javax.swing.JButton();
        graphDFS = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        graphDisplay = new javax.swing.JButton();

        inputFileChooserFrame.setTitle("Select input file...");

        inputFileChooser.setDialogTitle("Input FIle");
        inputFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputFileChooserFrameLayout = new javax.swing.GroupLayout(inputFileChooserFrame.getContentPane());
        inputFileChooserFrame.getContentPane().setLayout(inputFileChooserFrameLayout);
        inputFileChooserFrameLayout.setHorizontalGroup(
            inputFileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(inputFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        inputFileChooserFrameLayout.setVerticalGroup(
            inputFileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(inputFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        outputFileChooserFrame.setTitle("Select output file...");

        outputFileChooser.setDialogTitle("Input FIle");
        outputFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout outputFileChooserFrameLayout = new javax.swing.GroupLayout(outputFileChooserFrame.getContentPane());
        outputFileChooserFrame.getContentPane().setLayout(outputFileChooserFrameLayout);
        outputFileChooserFrameLayout.setHorizontalGroup(
            outputFileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        outputFileChooserFrameLayout.setVerticalGroup(
            outputFileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        binaryTreeFileChooserFrame.setTitle("Select input file...");

        binaryTreeFileChooser.setDialogTitle("Input FIle");
        binaryTreeFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryTreeFileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout binaryTreeFileChooserFrameLayout = new javax.swing.GroupLayout(binaryTreeFileChooserFrame.getContentPane());
        binaryTreeFileChooserFrame.getContentPane().setLayout(binaryTreeFileChooserFrameLayout);
        binaryTreeFileChooserFrameLayout.setHorizontalGroup(
            binaryTreeFileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(binaryTreeFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        binaryTreeFileChooserFrameLayout.setVerticalGroup(
            binaryTreeFileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(binaryTreeFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Jesse Young's JavaTest");

        outputTextArea.setColumns(20);
        outputTextArea.setFont(new java.awt.Font("NSimSun", 0, 13)); // NOI18N
        outputTextArea.setRows(5);
        outputTextArea.setAutoscrolls(false);
        outputTextArea.setName(""); // NOI18N
        outputTextArea.setPreferredSize(null);
        outputScrollPane.setViewportView(outputTextArea);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        inputButton.setText("Input");
        inputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputButtonActionPerformed(evt);
            }
        });

        outputButton.setText("Output");
        outputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputButtonActionPerformed(evt);
            }
        });

        readButton.setText("Read");
        readButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readButtonActionPerformed(evt);
            }
        });

        writeButton.setText("Write");
        writeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Change I/O File:");

        jLabel2.setText("Deal With Files:");

        jLabel3.setText("Sort By:");

        sortbyButtonGroup.add(sortbySSN);
        sortbySSN.setText("SSN");
        sortbySSN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortbySSNActionPerformed(evt);
            }
        });

        sortbyButtonGroup.add(sortbyTaxReturn);
        sortbyTaxReturn.setText("Tax Return");
        sortbyTaxReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortbyTaxReturnActionPerformed(evt);
            }
        });

        sortbyButtonGroup.add(sortbyExemptions);
        sortbyExemptions.setText("Exemptions");
        sortbyExemptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortbyExemptionsActionPerformed(evt);
            }
        });

        sortbyButtonGroup.add(sortbyTaxRate);
        sortbyTaxRate.setText("Tax Rate");
        sortbyTaxRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortbyTaxRateActionPerformed(evt);
            }
        });

        sortbyButtonGroup.add(sortbyWithholding);
        sortbyWithholding.setText("Withholding");
        sortbyWithholding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortbyWithholdingActionPerformed(evt);
            }
        });

        jLabel4.setText("Stack:");

        stackButtonGroup.add(stackPeek);
        stackPeek.setText("Peek");
        stackPeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stackPeekActionPerformed(evt);
            }
        });

        stackButtonGroup.add(stackPop);
        stackPop.setText("Pop");
        stackPop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stackPopActionPerformed(evt);
            }
        });

        stackButtonGroup.add(stackPush);
        stackPush.setText("Push");
        stackPush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stackPushActionPerformed(evt);
            }
        });

        queueButttonGroup.add(queuePeek);
        queuePeek.setText("Peek");
        queuePeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queuePeekActionPerformed(evt);
            }
        });

        queueButttonGroup.add(queueGet);
        queueGet.setText("Get");
        queueGet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueGetActionPerformed(evt);
            }
        });

        queueButttonGroup.add(queuePut);
        queuePut.setText("Put");
        queuePut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queuePutActionPerformed(evt);
            }
        });

        stackButtonGroup.add(stackDisplay);
        stackDisplay.setText("Display");
        stackDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stackDisplayActionPerformed(evt);
            }
        });

        queueButttonGroup.add(queueDisplay);
        queueDisplay.setText("Display");
        queueDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueDisplayActionPerformed(evt);
            }
        });

        stackButtonGroup.add(stackEmpty);
        stackEmpty.setText("Empty");
        stackEmpty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stackEmptyActionPerformed(evt);
            }
        });

        queueButttonGroup.add(queueEmpty);
        queueEmpty.setText("Empty");
        queueEmpty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueEmptyActionPerformed(evt);
            }
        });

        jLabel6.setText("Linked List:");

        linkedlistButtonGroup.add(linkedListInsertHead);
        linkedListInsertHead.setText("Insert Head");
        linkedListInsertHead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkedListInsertHeadActionPerformed(evt);
            }
        });

        linkedlistButtonGroup.add(linkedListInsertTail);
        linkedListInsertTail.setText("Insert Tail");
        linkedListInsertTail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkedListInsertTailActionPerformed(evt);
            }
        });

        linkedlistButtonGroup.add(linkedListRemoveHead);
        linkedListRemoveHead.setText("Remove Head");
        linkedListRemoveHead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkedListRemoveHeadActionPerformed(evt);
            }
        });

        linkedlistButtonGroup.add(linkedListDisplay);
        linkedListDisplay.setText("Display");
        linkedListDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkedListDisplayActionPerformed(evt);
            }
        });

        linkedlistButtonGroup.add(linkedListEmpty);
        linkedListEmpty.setText("Empty");
        linkedListEmpty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkedListEmptyActionPerformed(evt);
            }
        });

        linkedlistButtonGroup.add(linkedListRemoveTail);
        linkedListRemoveTail.setText("Remove Tail");
        linkedListRemoveTail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkedListRemoveTailActionPerformed(evt);
            }
        });

        linkedlistButtonGroup.add(linkedListPeekHead);
        linkedListPeekHead.setText("Peek Head");
        linkedListPeekHead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkedListPeekHeadActionPerformed(evt);
            }
        });

        linkedlistButtonGroup.add(linkedListPeekTail);
        linkedListPeekTail.setText("Peek Tail");
        linkedListPeekTail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkedListPeekTailActionPerformed(evt);
            }
        });

        linkedlistButtonGroup.add(linkedListRemoveElementAt);
        linkedListRemoveElementAt.setText("Remove At");
        linkedListRemoveElementAt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkedListRemoveElementAtActionPerformed(evt);
            }
        });

        linkedlistButtonGroup.add(linkedListPeekElementAt);
        linkedListPeekElementAt.setText("Peek At");
        linkedListPeekElementAt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkedListPeekElementAtActionPerformed(evt);
            }
        });

        linkedListRemoveN.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        linkedListPeekN.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        linkedListPeekN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkedListPeekNActionPerformed(evt);
            }
        });

        jLabel7.setText("Binary Tree:");

        binaryTreeButtonGroup.add(binaryTreeDisplay);
        binaryTreeDisplay.setText("Display");
        binaryTreeDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryTreeDisplayActionPerformed(evt);
            }
        });

        binaryTreeButtonGroup.add(binaryTreeInsertNode);
        binaryTreeInsertNode.setText("Insert Node");
        binaryTreeInsertNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryTreeInsertNodeActionPerformed(evt);
            }
        });

        binaryTreeButtonGroup.add(binaryTreeEmpty);
        binaryTreeEmpty.setText("Empty");
        binaryTreeEmpty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryTreeEmptyActionPerformed(evt);
            }
        });

        jLabel8.setText("Binary Tree Data File:");

        binaryTreeSelectFile.setText("Input");
        binaryTreeSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryTreeSelectFileActionPerformed(evt);
            }
        });

        binaryTreeReadFromFile.setText("Read");
        binaryTreeReadFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryTreeReadFromFileActionPerformed(evt);
            }
        });

        binaryTreeElementN.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        binaryTreeElementN.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                binaryTreeElementNFocusLost(evt);
            }
        });
        binaryTreeElementN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                binaryTreeElementNMouseClicked(evt);
            }
        });
        binaryTreeElementN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryTreeElementNActionPerformed(evt);
            }
        });

        binaryTreeButtonGroup.add(binaryTreeToInOrder);
        binaryTreeToInOrder.setText("In Order");
        binaryTreeToInOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryTreeToInOrderActionPerformed(evt);
            }
        });

        binaryTreeButtonGroup.add(binaryTreeToPreOrder);
        binaryTreeToPreOrder.setText("Pre Order");
        binaryTreeToPreOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryTreeToPreOrderActionPerformed(evt);
            }
        });

        binaryTreeButtonGroup.add(binaryTreeToPostOrder);
        binaryTreeToPostOrder.setText("Post Order");
        binaryTreeToPostOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryTreeToPostOrderActionPerformed(evt);
            }
        });

        binaryTreeFindElementButton.setText("Find Element");
        binaryTreeFindElementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryTreeFindElementButtonActionPerformed(evt);
            }
        });

        binaryTreeButtonGroup.add(binaryTreeCountNodes);
        binaryTreeCountNodes.setText("Count Nodes");
        binaryTreeCountNodes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryTreeCountNodesActionPerformed(evt);
            }
        });

        jLabel9.setText("Sort Algorithms:");

        sortingButtonGroup.add(insertionSortButton);
        insertionSortButton.setText("Insertion");
        insertionSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertionSortButtonActionPerformed(evt);
            }
        });

        sortingButtonGroup.add(mergeSortButton);
        mergeSortButton.setText("Merge");
        mergeSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeSortButtonActionPerformed(evt);
            }
        });

        jLabel10.setText("Graph:");

        graphCmb1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        graphCmb2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        graphAddEdge.setText("Add Edge");
        graphAddEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphAddEdgeActionPerformed(evt);
            }
        });

        graphBFS.setText("BFS");
        graphBFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphBFSActionPerformed(evt);
            }
        });

        graphDFS.setText("DFS");
        graphDFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphDFSActionPerformed(evt);
            }
        });

        jLabel11.setText("Queue:");

        graphDisplay.setText("Display Graph");
        graphDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphDisplayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(outputScrollPane)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(19, 19, 19)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(binaryTreeToPostOrder)
                                        .addComponent(binaryTreeCountNodes)
                                        .addComponent(binaryTreeToPreOrder)
                                        .addComponent(binaryTreeToInOrder))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 773, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(binaryTreeElementN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(binaryTreeFindElementButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(okButton))))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addGap(115, 115, 115)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(readButton)
                                                .addComponent(jLabel2)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(25, 25, 25)
                                            .addComponent(inputButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(outputButton)
                                            .addGap(117, 117, 117)
                                            .addComponent(writeButton)))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(insertionSortButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(mergeSortButton)
                                                    .addGap(18, 18, 18)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel8)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addGap(10, 10, 10)
                                                            .addComponent(binaryTreeSelectFile)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(binaryTreeReadFromFile)))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(linkedListInsertTail)
                                                        .addComponent(linkedListRemoveTail)
                                                        .addComponent(linkedListPeekTail)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(linkedListPeekElementAt)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                            .addComponent(linkedListPeekN, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(linkedListEmpty))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(graphCmb1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel10))
                                                    .addGap(5, 5, 5))))))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(10, 10, 10)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(sortbyTaxReturn)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(sortbyWithholding)
                                                        .addComponent(sortbyTaxRate)
                                                        .addComponent(sortbyExemptions)
                                                        .addComponent(sortbySSN))
                                                    .addGap(3, 3, 3)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(stackDisplay)
                                                        .addComponent(stackPeek)
                                                        .addComponent(stackPop)
                                                        .addComponent(stackPush)
                                                        .addComponent(stackEmpty))))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(queuePeek)
                                                        .addComponent(queueGet)
                                                        .addComponent(queuePut)
                                                        .addComponent(queueDisplay)
                                                        .addComponent(queueEmpty))
                                                    .addGap(35, 35, 35)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel6)
                                                        .addComponent(linkedListInsertHead)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(linkedListRemoveElementAt)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                            .addComponent(linkedListRemoveN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(linkedListPeekHead)
                                                        .addComponent(linkedListRemoveHead)
                                                        .addComponent(linkedListDisplay)))
                                                .addComponent(binaryTreeEmpty)
                                                .addComponent(binaryTreeInsertNode)
                                                .addComponent(binaryTreeDisplay)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addGap(45, 45, 45)
                                            .addComponent(jLabel4)
                                            .addGap(41, 41, 41)
                                            .addComponent(jLabel11)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(graphCmb2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(graphAddEdge)
                                .addComponent(graphDisplay)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(graphBFS)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(graphDFS))))))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(inputButton)
                                .addComponent(outputButton)
                                .addComponent(readButton)
                                .addComponent(writeButton))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(insertionSortButton)
                                .addComponent(mergeSortButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(binaryTreeSelectFile)
                            .addComponent(binaryTreeReadFromFile))))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(linkedListInsertHead)
                            .addComponent(linkedListInsertTail))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(linkedListRemoveHead)
                            .addComponent(linkedListRemoveTail))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(linkedListPeekHead)
                            .addComponent(linkedListPeekTail))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(linkedListRemoveElementAt)
                            .addComponent(linkedListRemoveN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(linkedListPeekElementAt)
                            .addComponent(linkedListPeekN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(linkedListDisplay)
                            .addComponent(linkedListEmpty)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel3))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(queueEmpty)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(queuePeek)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(queueGet)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(queuePut)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(queueDisplay)
                                        .addGap(23, 23, 23))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(sortbyTaxReturn)
                                            .addComponent(stackEmpty))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(stackPeek)
                                            .addComponent(sortbySSN))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(stackPop)
                                            .addComponent(sortbyTaxRate))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(stackPush)
                                            .addComponent(sortbyWithholding))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(stackDisplay)
                                            .addComponent(sortbyExemptions)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(15, 15, 15)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(graphCmb1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(graphCmb2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(graphAddEdge)
                                        .addGap(7, 7, 7)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(graphBFS)
                                            .addComponent(graphDFS))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(graphDisplay)))
                                .addGap(21, 21, 21)))))
                .addGap(10, 10, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(binaryTreeToPostOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(binaryTreeToInOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(binaryTreeToPreOrder))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(binaryTreeDisplay)
                        .addGap(3, 3, 3)
                        .addComponent(binaryTreeInsertNode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(binaryTreeEmpty)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(binaryTreeCountNodes)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(binaryTreeElementN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(binaryTreeFindElementButton)
                    .addComponent(okButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // TODO add your handling code here
        this.setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_okButtonActionPerformed

    private void readButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readButtonActionPerformed
        // TODO add your handling code here:
        File f = new File(inputFileName);
        if(f.exists() && !f.isDirectory()) {
            theStack.empty(); //clear out the stack
            x = JavaTest.read(inputFileName); //read from file
            outputTextArea.setText("\n\t---- READ FROM FILE (" + inputFileName + ") -----\n");
            for (JavaTest m: x) outputTextArea.append(m + "\n");
        } else {
            outputTextArea.setText("\n  File not found. Creating " + inputFileName + "...");
            JavaTest.write(inputFileName, x); //output array to file
        }
    }//GEN-LAST:event_readButtonActionPerformed

    private void writeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeButtonActionPerformed
        // TODO add your handling code here:
        //write new objects to file
        JavaTest.write(outputFileName, x); //output array to file
        outputTextArea.setText("\n  Successfully wrote to file:\n\t" + outputFileName + "\n");
    }//GEN-LAST:event_writeButtonActionPerformed

    private void inputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputButtonActionPerformed
        // TODO add your handling code here:
        inputFileChooserFrame.setSize(515, 365);
        inputFileChooserFrame.setVisible(true);
    }//GEN-LAST:event_inputButtonActionPerformed

    private void outputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputButtonActionPerformed
        // TODO add your handling code here:
        outputFileChooserFrame.setSize(515, 365);
        outputFileChooserFrame.setVisible(true);
    }//GEN-LAST:event_outputButtonActionPerformed

    private void inputFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileChooserActionPerformed
        // TODO add your handling code here:
        if(inputFileChooser.getSelectedFile() != null) {
            inputFileName = inputFileChooser.getSelectedFile().toString();
        }
        inputFileChooserFrame.setVisible(false);
    }//GEN-LAST:event_inputFileChooserActionPerformed

    private void outputFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFileChooserActionPerformed
        // TODO add your handling code here:
        if(outputFileChooser.getSelectedFile() != null) {
            outputFileName = outputFileChooser.getSelectedFile().toString();
        }
        outputFileChooserFrame.setVisible(false);
    }//GEN-LAST:event_outputFileChooserActionPerformed

    private void sortbySSNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortbySSNActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- CHANGED TO SORT BY SSN -----\n");
        JavaTest.sortBy = JavaTest.SORTBY.SSN;
        //java.util.Arrays.sort (x);
        //for (JavaTest m: x) outputTextArea.append(m + "\n");
    }//GEN-LAST:event_sortbySSNActionPerformed

    private void sortbyTaxReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortbyTaxReturnActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- CHANGED TO SORT BY TAX RETURN -----\n");
        JavaTest.sortBy = JavaTest.SORTBY.TAXRETURN;
        //java.util.Arrays.sort (x);
        //for (JavaTest m: x) outputTextArea.append(m + "\n");
    }//GEN-LAST:event_sortbyTaxReturnActionPerformed

    private void sortbyExemptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortbyExemptionsActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- CHANGED TO SORT BY EXEMPTION -----\n");
        JavaTest.sortBy = JavaTest.SORTBY.EXEMPTION;
        //java.util.Arrays.sort (x);
        //for (JavaTest m: x) outputTextArea.append(m + "\n");
    }//GEN-LAST:event_sortbyExemptionsActionPerformed

    private void sortbyTaxRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortbyTaxRateActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- CHANGED TO SORT BY TAX RATE -----\n"); 
        JavaTest.sortBy = JavaTest.SORTBY.TAXRATE;
        //java.util.Arrays.sort (x);
        //for (JavaTest m: x) outputTextArea.append(m + "\n");
    }//GEN-LAST:event_sortbyTaxRateActionPerformed

    private void sortbyWithholdingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortbyWithholdingActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- CHANGED TO SORT BY WITHHOLDING -----\n"); 
        JavaTest.sortBy = JavaTest.SORTBY.WITHHOLDING;
        //java.util.Arrays.sort (x);
        //for (JavaTest m: x) outputTextArea.append(m + "\n");
    }//GEN-LAST:event_sortbyWithholdingActionPerformed

    private void stackPeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stackPeekActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- STACK PEEK -----\n");
        
        if(!theStack.isEmpty()) {
            outputTextArea.append(theStack.peek() + "\n\n");
        } else {
            outputTextArea.append("The stack is empty." + "\n\n");
        }
    }//GEN-LAST:event_stackPeekActionPerformed

    private void stackPopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stackPopActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- STACK POP -----\n");
        
        if(!theStack.isEmpty()) {
            outputTextArea.append(theStack.pop() + "\n\n");
        } else {
            outputTextArea.append("The stack is empty." + "\n\n");
        }
    }//GEN-LAST:event_stackPopActionPerformed

    private void stackPushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stackPushActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- STACK PUSH -----\n");
        
        JavaTest[] toPush = JavaTest.makeRandom(1);
        theStack.push(toPush[0]);
            
        if(!theStack.isEmpty()) {
            outputTextArea.append(theStack.peek() + "\n\n");
        } else {
            outputTextArea.append("The stack is empty." + "\n\n");
        }
    }//GEN-LAST:event_stackPushActionPerformed

    private void queuePeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queuePeekActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- QUEUE PEEK -----\n");
        
        if(!theQueue.isEmpty()) {
            outputTextArea.append(theQueue.peek() + "\n\n");
        } else {
            outputTextArea.append("The queue is empty." + "\n\n");
        }
    }//GEN-LAST:event_queuePeekActionPerformed

    private void queueGetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueGetActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- QUEUE GET -----\n");
        
        if(!theQueue.isEmpty()) {
            outputTextArea.append(theQueue.get() + "\n\n");
        } else {
            outputTextArea.append("The queue is empty." + "\n\n");
        }
    }//GEN-LAST:event_queueGetActionPerformed

    private void queuePutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queuePutActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- QUEUE PUT -----\n");
        
        JavaTest[] toPut = JavaTest.makeRandom(1);
        theQueue.put(toPut[0]);
        outputTextArea.append(toPut[0] + "\n\n");
    }//GEN-LAST:event_queuePutActionPerformed

    private void stackDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stackDisplayActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- STACK DISPLAY -----\n");
        outputTextArea.append(theStack.toString() + "\n\n");
    }//GEN-LAST:event_stackDisplayActionPerformed

    private void queueDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueDisplayActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- QUEUE DISPLAY -----\n");
        outputTextArea.append(theQueue.toString() + "\n\n");
    }//GEN-LAST:event_queueDisplayActionPerformed

    private void stackEmptyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stackEmptyActionPerformed
        // TODO add your handling code here:
        theStack.empty();
        
        outputTextArea.setText("\n\t---- STACK EMPTY -----\n");
        outputTextArea.append(theStack.toString() + "\n\n");
    }//GEN-LAST:event_stackEmptyActionPerformed

    private void queueEmptyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueEmptyActionPerformed
        // TODO add your handling code here:
        theQueue.empty();
        
        outputTextArea.setText("\n\t---- QUEUE EMPTY -----\n");
        outputTextArea.append(theQueue.toString() + "\n\n");
    }//GEN-LAST:event_queueEmptyActionPerformed

    private void increaseComboBoxes() {
        //add value to the combobox
        int toAdd = theList.getN()-1;
        linkedListRemoveN.addItem(toAdd);
        linkedListPeekN.addItem(toAdd);
    }
    
    private void decreaseComboBoxes() {
        //remove last value in the combobox
        linkedListRemoveN.removeItemAt(theList.getN());
        linkedListPeekN.removeItemAt(theList.getN());
    }
    
    private void emptyComboBoxes() {
        //empty the comboboxes
        linkedListRemoveN.removeAllItems();
        linkedListPeekN.removeAllItems();
    }
    
    private void linkedListInsertHeadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkedListInsertHeadActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- LINKED LIST INSERT HEAD -----\n");
        
        JavaTest[] toInsert = JavaTest.makeRandom(1);
        theList.insertHead(toInsert[0]);
        outputTextArea.append(toInsert[0] + "\n\n");
        
        increaseComboBoxes();
    }//GEN-LAST:event_linkedListInsertHeadActionPerformed

    private void linkedListInsertTailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkedListInsertTailActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- LINKED LIST INSERT TAIL -----\n");
        
        JavaTest[] toInsert = JavaTest.makeRandom(1);
        theList.insertTail(toInsert[0]);
        outputTextArea.append(toInsert[0] + "\n\n");
        
        increaseComboBoxes();
    }//GEN-LAST:event_linkedListInsertTailActionPerformed

    private void linkedListRemoveHeadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkedListRemoveHeadActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- LINKED LIST REMOVE HEAD -----\n");
        
      try {
        outputTextArea.append(theList.removeHead() + "\n\n");
      } catch (ILinkedList.LinkedListException ex) {
        Logger.getLogger(JavaTestGUI.class.getName()).log(Level.SEVERE, null, ex);
      }
        decreaseComboBoxes();
    }//GEN-LAST:event_linkedListRemoveHeadActionPerformed

    private void linkedListDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkedListDisplayActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- LINKED LIST DISPLAY -----\n");
        outputTextArea.append(theList.toString() + "\n\n");
    }//GEN-LAST:event_linkedListDisplayActionPerformed

    private void linkedListEmptyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkedListEmptyActionPerformed
        // TODO add your handling code here:
        theList.empty();
        emptyComboBoxes();
        
        outputTextArea.setText("\n\t---- LINKED LIST EMPTY -----\n");
        outputTextArea.append(theList.toString() + "\n\n");
    }//GEN-LAST:event_linkedListEmptyActionPerformed

    private void linkedListPeekTailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkedListPeekTailActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- LINKED LIST PEEK TAIL -----\n");
      try {
        outputTextArea.append(theList.peekTail() + "\n\n");
      } catch (ILinkedList.LinkedListException ex) {
        Logger.getLogger(JavaTestGUI.class.getName()).log(Level.SEVERE, null, ex);
      }
    }//GEN-LAST:event_linkedListPeekTailActionPerformed

    private void linkedListPeekHeadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkedListPeekHeadActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- LINKED LIST PEEK HEAD -----\n");
      try {
        outputTextArea.append(theList.peekHead() + "\n\n");
      } catch (ILinkedList.LinkedListException ex) {
        Logger.getLogger(JavaTestGUI.class.getName()).log(Level.SEVERE, null, ex);
      }
    }//GEN-LAST:event_linkedListPeekHeadActionPerformed

    private void linkedListRemoveElementAtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkedListRemoveElementAtActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- LINKED LIST REMOVE ELEMENT AT -----\n");
        
        int itemNumber = Integer.parseInt(linkedListRemoveN.getSelectedItem().toString());
      try {
        outputTextArea.append(theList.removeElementAt(itemNumber) + "\n\n");
      } catch (ILinkedList.LinkedListException ex) {
        Logger.getLogger(JavaTestGUI.class.getName()).log(Level.SEVERE, null, ex);
      }
        decreaseComboBoxes();
    }//GEN-LAST:event_linkedListRemoveElementAtActionPerformed

    private void linkedListPeekElementAtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkedListPeekElementAtActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- LINKED LIST PEEK ELEMENT AT -----\n");
        
        int itemNumber = Integer.parseInt(linkedListPeekN.getSelectedItem().toString());
      try {
        outputTextArea.append(theList.peekElementAt(itemNumber) + "\n\n");
      } catch (ILinkedList.LinkedListException ex) {
        Logger.getLogger(JavaTestGUI.class.getName()).log(Level.SEVERE, null, ex);
      }
    }//GEN-LAST:event_linkedListPeekElementAtActionPerformed

    private void linkedListRemoveTailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkedListRemoveTailActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- LINKED LIST REMOVE TAIL -----\n");
        
      try {
        outputTextArea.append(theList.removeTail() + "\n\n");
      } catch (ILinkedList.LinkedListException ex) {
        Logger.getLogger(JavaTestGUI.class.getName()).log(Level.SEVERE, null, ex);
      }
        decreaseComboBoxes();
    }//GEN-LAST:event_linkedListRemoveTailActionPerformed

    private void binaryTreeDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryTreeDisplayActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- TREE DISPLAY -----\n");
        outputTextArea.append(theTree.toString() + "\n\n");
    }//GEN-LAST:event_binaryTreeDisplayActionPerformed

    private void binaryTreeSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryTreeSelectFileActionPerformed
        // TODO add your handling code here:
        binaryTreeFileChooserFrame.setSize(515, 365);
        binaryTreeFileChooserFrame.setVisible(true);
    }//GEN-LAST:event_binaryTreeSelectFileActionPerformed

    private void binaryTreeFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryTreeFileChooserActionPerformed
        // TODO add your handling code here:
        if(binaryTreeFileChooser.getSelectedFile() != null) {
            binaryTreeFileName = binaryTreeFileChooser.getSelectedFile().toString();
        }
        binaryTreeFileChooserFrame.setVisible(false);
    }//GEN-LAST:event_binaryTreeFileChooserActionPerformed
    
    private void binaryTreeReadFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryTreeReadFromFileActionPerformed
        try {
            // TODO add your handling code here:
            theTree.empty();
            theTree.read(new Scanner(new java.io.File(binaryTreeFileName)),true);
            
            binaryTreeElementN.removeAllItems(); //clear the combo box associated with finding these elements
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JavaTestGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_binaryTreeReadFromFileActionPerformed

    private void binaryTreeInsertNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryTreeInsertNodeActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- BINARY TREE INSERT NODE -----\n");
        
        JavaTest[] toInsert = JavaTest.makeRandom(1);
        NodeTreeBin nodeInserted = (NodeTreeBin)theTree.insertNode(theTree.getRoot(), new NodeTreeBin(), toInsert[0]);
        binaryTreeElementN.addItem(nodeInserted.toString()); //add to combo box for finding of elements
        outputTextArea.append(nodeInserted.toString() + "\n\n");
    }//GEN-LAST:event_binaryTreeInsertNodeActionPerformed

    private void binaryTreeEmptyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryTreeEmptyActionPerformed
        // TODO add your handling code here:
        theTree.empty();
        binaryTreeElementN.removeAllItems();
        
        outputTextArea.setText("\n\t---- BINARY TREE EMPTY -----\n");
        outputTextArea.append(theTree.toString() + "\n\n");
    }//GEN-LAST:event_binaryTreeEmptyActionPerformed

    private void findElement() {
        outputTextArea.setText("\n\t---- BINARY TREE FIND ELEMENT -----\n");
        
        //outputTextArea.append(theTree.findElement(theTree.getRoot(), binaryTreeElementN.getSelectedItem().toString()) + "\n\n");
    }
    
    private void binaryTreeElementNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryTreeElementNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_binaryTreeElementNActionPerformed

    private void binaryTreeElementNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_binaryTreeElementNMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_binaryTreeElementNMouseClicked

    private void binaryTreeElementNFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_binaryTreeElementNFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_binaryTreeElementNFocusLost

    private void binaryTreeToPreOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryTreeToPreOrderActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- BINARY TREE PRE ORDER -----\n");
        if(!theTree.isEmpty()) {
            outputTextArea.append(TreeBinUMUC.toPreOrderString(theTree.getRoot()) + "\n\n");
        } else {
            outputTextArea.append("Tree is empty.");
        }
    }//GEN-LAST:event_binaryTreeToPreOrderActionPerformed

    private void binaryTreeToInOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryTreeToInOrderActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- BINARY TREE IN ORDER -----\n");
        if(!theTree.isEmpty()) {
            outputTextArea.append(TreeBinUMUC.toInOrderString(theTree.getRoot()) + "\n\n");
        } else {
            outputTextArea.append("Tree is empty.");
        }
    }//GEN-LAST:event_binaryTreeToInOrderActionPerformed

    private void binaryTreeToPostOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryTreeToPostOrderActionPerformed
        // TODO add your handling code here:
        outputTextArea.setText("\n\t---- BINARY TREE POST ORDER -----\n");
        if(!theTree.isEmpty()) {
            outputTextArea.append(TreeBinUMUC.toPostOrderString(theTree.getRoot()) + "\n\n");
        } else {
            outputTextArea.append("Tree is empty.");
        }
    }//GEN-LAST:event_binaryTreeToPostOrderActionPerformed

    private void binaryTreeFindElementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryTreeFindElementButtonActionPerformed
        // TODO add your handling code here:
        if(!theTree.isEmpty()) {
            findElement();
        }
    }//GEN-LAST:event_binaryTreeFindElementButtonActionPerformed

    private void binaryTreeCountNodesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryTreeCountNodesActionPerformed
        // TODO add your handling code here:
        String text = "";
        //count the nodes
        text += "Node count: ";
        text += String.format("%3d", TreeBinUMUC.countNodes(theTree.getRoot()));
        text += "\n";
        
        outputTextArea.setText("\n\t---- BINARY TREE COUNT NODES -----\n");
        outputTextArea.append(text + "\n\n");
    }//GEN-LAST:event_binaryTreeCountNodesActionPerformed

    
    private void insertionSortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertionSortButtonActionPerformed
        // TODO add your handling code here:
        //perform insertion sort
        MySort.insertionSort(x);
        
        outputTextArea.setText("\n\t---- INSERTION SORTED BY " + JavaTest.sortBy + " -----\n");
        for (JavaTest m: x) outputTextArea.append(m + "\n");
    }//GEN-LAST:event_insertionSortButtonActionPerformed

    private void mergeSortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeSortButtonActionPerformed
        // TODO add your handling code here:
        //perform merge sort
        MySort.mergeSort(x);
        
        outputTextArea.setText("\n\t---- MERGE SORTED BY " + JavaTest.sortBy + " -----\n");
        for (JavaTest m: x) outputTextArea.append(m + "\n");
    }//GEN-LAST:event_mergeSortButtonActionPerformed

    private void linkedListPeekNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkedListPeekNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_linkedListPeekNActionPerformed

    private void graphBFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphBFSActionPerformed
        // TODO add your handling code here:
        
        //perform BFS!
        Vector[] findConnectionBetween = new Vector[2];
        findConnectionBetween[0] = (Vector)graphCmb1.getSelectedItem(); //get first vector
        findConnectionBetween[1] = (Vector)graphCmb2.getSelectedItem(); //get vector to find connection to
        int numFound = theGraph.bfs(findConnectionBetween[0], findConnectionBetween[1]); //perform search
        
        //start building string to dispaly in output text area
        String forOutput = "\n";
        forOutput += "Searching for connection between " + ((JavaTest)findConnectionBetween[0].getObject()).uid
                + " and " + ((JavaTest)findConnectionBetween[1].getObject()).uid + "\n";
        if(numFound > 0) forOutput +="\tFound " + numFound + " connection(s) to destination!!";
        else forOutput += "\tNo connection to destination vector exists.";
        forOutput += "\n";
        
        outputTextArea.setText("\n\t---- GRAPH BFS -----\n");
        outputTextArea.append(forOutput);
    }//GEN-LAST:event_graphBFSActionPerformed

    private void graphAddEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphAddEdgeActionPerformed
        // TODO add your handling code here:
        
        Vector[] edgeVectors = new Vector[2];
        edgeVectors[0] = (Vector)graphCmb1.getSelectedItem(); //get first vector
        edgeVectors[1] = (Vector)graphCmb2.getSelectedItem(); //get vector to add edge to
        boolean edgeExists = theGraph.hasEdge(edgeVectors[0], edgeVectors[1]); //ensure no duplicate edges are created on next line
        if((edgeVectors[0] != edgeVectors[1])&&(!edgeExists)) theGraph.addEdge(edgeVectors[0], edgeVectors[1]); //add edge as long as it's not to itself
        
        outputTextArea.setText("\n\t---- GRAPH ADD EDGE -----\n");
        outputTextArea.append(theGraph + "\n");
    }//GEN-LAST:event_graphAddEdgeActionPerformed

    private void graphDFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphDFSActionPerformed
        // TODO add your handling code here:
        
        //perform DFS!
        Vector[] findConnectionBetween = new Vector[2];
        findConnectionBetween[0] = (Vector)graphCmb1.getSelectedItem(); //get first vector
        findConnectionBetween[1] = (Vector)graphCmb2.getSelectedItem(); //get vector to find connection to
        int numFound = theGraph.dfs(findConnectionBetween[0], findConnectionBetween[1]); //perform search
        
        //start building string to dispaly in output text area
        String forOutput = "\n";
        forOutput += "Searching for connection between " + ((JavaTest)findConnectionBetween[0].getObject()).uid
                + " and " + ((JavaTest)findConnectionBetween[1].getObject()).uid + "\n";
        if(numFound > 0) forOutput +="\tFound " + numFound + " connection(s) to destination!!";
        else forOutput += "\tNo connection to destination vector exists.";
        forOutput += "\n";
        
        outputTextArea.setText("\n\t---- GRAPH DFS -----\n");
        outputTextArea.append(forOutput);
    }//GEN-LAST:event_graphDFSActionPerformed

    private void graphDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphDisplayActionPerformed
        // TODO add your handling code here:
        
        outputTextArea.setText("\n\t---- GRAPH DISPLAY -----\n");
        outputTextArea.append(theGraph + "\n");
    }//GEN-LAST:event_graphDisplayActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JavaTestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JavaTestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JavaTestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JavaTestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JavaTestGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup binaryTreeButtonGroup;
    private javax.swing.JRadioButton binaryTreeCountNodes;
    private javax.swing.JRadioButton binaryTreeDisplay;
    private javax.swing.JComboBox binaryTreeElementN;
    private javax.swing.JRadioButton binaryTreeEmpty;
    private javax.swing.JFileChooser binaryTreeFileChooser;
    private javax.swing.JFrame binaryTreeFileChooserFrame;
    private javax.swing.JButton binaryTreeFindElementButton;
    private javax.swing.JRadioButton binaryTreeInsertNode;
    private javax.swing.JButton binaryTreeReadFromFile;
    private javax.swing.JButton binaryTreeSelectFile;
    private javax.swing.JRadioButton binaryTreeToInOrder;
    private javax.swing.JRadioButton binaryTreeToPostOrder;
    private javax.swing.JRadioButton binaryTreeToPreOrder;
    private javax.swing.JButton graphAddEdge;
    private javax.swing.JButton graphBFS;
    private javax.swing.JComboBox graphCmb1;
    private javax.swing.JComboBox graphCmb2;
    private javax.swing.JButton graphDFS;
    private javax.swing.JButton graphDisplay;
    private javax.swing.JButton inputButton;
    private javax.swing.JFileChooser inputFileChooser;
    private javax.swing.JFrame inputFileChooserFrame;
    private javax.swing.JRadioButton insertionSortButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton linkedListDisplay;
    private javax.swing.JRadioButton linkedListEmpty;
    private javax.swing.JRadioButton linkedListInsertHead;
    private javax.swing.JRadioButton linkedListInsertTail;
    private javax.swing.JRadioButton linkedListPeekElementAt;
    private javax.swing.JRadioButton linkedListPeekHead;
    private javax.swing.JComboBox linkedListPeekN;
    private javax.swing.JRadioButton linkedListPeekTail;
    private javax.swing.JRadioButton linkedListRemoveElementAt;
    private javax.swing.JRadioButton linkedListRemoveHead;
    private javax.swing.JComboBox linkedListRemoveN;
    private javax.swing.JRadioButton linkedListRemoveTail;
    private javax.swing.ButtonGroup linkedlistButtonGroup;
    private javax.swing.JRadioButton mergeSortButton;
    private javax.swing.JButton okButton;
    private javax.swing.JButton outputButton;
    private javax.swing.JFileChooser outputFileChooser;
    private javax.swing.JFrame outputFileChooserFrame;
    private javax.swing.JScrollPane outputScrollPane;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.ButtonGroup queueButttonGroup;
    private javax.swing.JRadioButton queueDisplay;
    private javax.swing.JRadioButton queueEmpty;
    private javax.swing.JRadioButton queueGet;
    private javax.swing.JRadioButton queuePeek;
    private javax.swing.JRadioButton queuePut;
    private javax.swing.JButton readButton;
    private javax.swing.ButtonGroup sortbyButtonGroup;
    private javax.swing.JRadioButton sortbyExemptions;
    private javax.swing.JRadioButton sortbySSN;
    private javax.swing.JRadioButton sortbyTaxRate;
    private javax.swing.JRadioButton sortbyTaxReturn;
    private javax.swing.JRadioButton sortbyWithholding;
    private javax.swing.ButtonGroup sortingButtonGroup;
    private javax.swing.ButtonGroup stackButtonGroup;
    private javax.swing.JRadioButton stackDisplay;
    private javax.swing.JRadioButton stackEmpty;
    private javax.swing.JRadioButton stackPeek;
    private javax.swing.JRadioButton stackPop;
    private javax.swing.JRadioButton stackPush;
    private javax.swing.JButton writeButton;
    // End of variables declaration//GEN-END:variables
}
